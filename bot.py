import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from main import xmlToList
from const import token
from function import *

bot = telebot.TeleBot(token)
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤
counters = {}

@bot.message_handler(commands=['start'])
def welcome(message):
	bot.send_message(message.chat.id, '<i>–ü—Ä–∏–≤–µ—Ç!</i> üëã\n\n<b>–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É üìù</b>\n\n–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–∏—à–∏ /get', parse_mode='HTML')

@bot.message_handler(commands=['get'])
def get(message):
	chat_id = message.chat.id
	counters[chat_id] = [] 
	message_bot = bot.send_message(message.chat.id,"üë• –í–≤–µ–¥–∏ <b>–ì—Ä—É–ø–ø—É</b> —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ò–° 1.20</code>", parse_mode='HTML')
	bot.register_next_step_handler(message_bot, date)

def date(message):
	chat_id = message.chat.id
	counters[chat_id].append(convert_to_group(message.text))
	message_bot = bot.send_message(message.chat.id,"üìÖ –í–≤–µ–¥–∏ <b>–î–∞—Ç—É</b> —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏(–ø—Ä–æ–±–µ–ª—ã, —Ç–æ—á–∫–∏, —Å–ª—ç—à–∏) –∑–Ω–∞–∫–∞–º–∏. –£–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–î–î.–ú–ú.–ì–ì</code>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>17.06.24</code>", parse_mode='HTML')
	bot.register_next_step_handler(message_bot, alert)

def create_markup(chat_id):
	markup = InlineKeyboardMarkup()
	decrement_button = InlineKeyboardButton('<', callback_data=f'decrement_{chat_id}')
	increment_button = InlineKeyboardButton('>', callback_data=f'increment_{chat_id}')
	markup.add(decrement_button, increment_button)

	return markup

def alert(message):
	chat_id = message.chat.id
	counters[chat_id].append(convert_to_date(message.text))
	markup = create_markup(chat_id)
	listing = xmlToList(counters[chat_id][0], counters[chat_id][1])
	
	bot.send_message(message.chat.id, listing, parse_mode = 'HTML', reply_markup = markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
	chat_id = call.message.chat.id
	markup = create_markup(chat_id)
	
	try:
		if f'increment_{chat_id}' in call.data:
			counters[chat_id][1] = increment_date(counters[chat_id][1])
		elif f'decrement_{chat_id}' in call.data:
			counters[chat_id][1] = deincrement_date(counters[chat_id][1])

		listing = xmlToList(counters[chat_id][0], counters[chat_id][1])
		bot.edit_message_text(listing, chat_id=chat_id, message_id=call.message.message_id,parse_mode = 'HTML', reply_markup=markup)

	except:
		bot.send_message(call.message.chat.id, '‚ö† –û—à–∏–±–∫–∞: <code>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞</code> \n\n–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ /get', parse_mode = 'HTML')



bot.polling()
